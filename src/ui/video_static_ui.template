<!DOCTYPE html>
<html class="use-all-space">
	<head>
		<meta http-equiv="X-UA-Compatible" content="IE=Edge" />
		<meta charset="UTF-8" />
		<meta
		  name="viewport"
		  content="width=device-width,initial-scale=1,maximum-scale=1,user-scalable=no"
		/>
		<title>Test Camera</title>
		<style>
			body {
				width: 100%;
				height: 100%;
				display: flex;
				justify-content: center;
				background: lightgray;
			}
			th {
				background: #22B14C;
				th: 15px;
			}
			tr {
				padding: 15px;
			}
			#total {
				margin: 10px;
			}
			#main {
				display:flex;
				flex-direction: column;
				width:100%;
			}
			#camera_interface {
				display:flex;
				flex-direction: row;
				width:100%;
				justify-content: center;
			}
		</style>
	</head>
  <body>
	<div id="main">
		<div id="log" style="display:none;backgorund:yellow;padding:10px;position:fixed;"> </div>
		<div id="camera_interface">
			<div class="left">
				<div id="startButton" class="button">Start Recording</div>
				<h2>Preview</h2>
				<video id="preview" width="160" height="120" autoplay muted></video>
			</div>
		
			<div class="right">
				<div id="stopButton" class="button">Stop Recording</div>
				<h2>Recording</h2>
				<video id="recording" width="160" height="120" controls></video> <br>
				<a id="downloadButton" class="button">Download</a>
			</div>
	</div>
	
	<script>
		function log(msg) {
			let logElement = document.getElementById("log");
			logElement.innerText += `${msg}`;
		}
		
		function wait(delayInMS) {
		  return new Promise((resolve) => setTimeout(resolve, delayInMS));
		}
		
		
		let preview = document.getElementById("preview");
		let recording = document.getElementById("recording");
		let startButton = document.getElementById("startButton");
		let stopButton = document.getElementById("stopButton");
		let downloadButton = document.getElementById("downloadButton");
		let logElement = document.getElementById("log");

		let recordingTimeMS = 5000;
		
		function startRecording(stream, lengthInMS) {
			let recorder = new MediaRecorder(stream);
			let data = [];

			recorder.ondataavailable = (event) => data.push(event.data);
			recorder.start();
			log(`${recorder.state} for ${lengthInMS / 1000} secondsâ€¦`);

			let stopped = new Promise((resolve, reject) => {
				recorder.onstop = resolve;
				recorder.onerror = (event) => reject(event.name);
			});

			let recorded = wait(lengthInMS).then(() => {
				if (recorder.state === "recording") {
					recorder.stop();
				}
			});

			return Promise.all([stopped, recorded]).then(() => data);
		}
		
		function start_preview_stream() {
			navigator.mediaDevices.getUserMedia({
				video: true,
				audio: true,
			})
			.then((stream) => {
				preview.srcObject = stream;
				downloadButton.href = stream;
				preview.captureStream =
					preview.captureStream || preview.mozCaptureStream;
				return new Promise((resolve) => {
					preview.onplaying = resolve;
				});
			})
			.then(() => startRecording(preview.captureStream(), recordingTimeMS))
			.then((recordedChunks) => {
				let recordedBlob = new Blob(recordedChunks, { type: "video/webm" });
				recording.src = URL.createObjectURL(recordedBlob);
				downloadButton.href = recording.src;
				downloadButton.download = "RecordedVideo.webm";

				log(`Successfully recorded ${recordedBlob.size} bytes of ${recordedBlob.type} media.`,);
			})
			.catch((error) => {
				if (error.name === "NotFoundError") {
					log("Camera or microphone not found. Can't record.");
				} else {
					log(error);
				}
			});
		}
		
		function stop(stream) {
			stream.getTracks().forEach((track) => track.stop());
		}
		
		startButton.addEventListener(
			"click",
			() => {
				start_preview_stream();
			});
		
		stopButton.addEventListener(
			"click",
			() => {
				if (preview.srcObject !== null) {
					stop(preview.srcObject);
				}
			},
			false,
		);
		
	</script>

	</body>
	
</html>
